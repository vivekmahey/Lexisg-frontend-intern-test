import { useState } from "react";
import AnswerPanel from "./components/AnswerPanel";
import InputBox from "./components/InputBox";
import CitationModal from "./components/CitationModal";

function App() {
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [activeCitation, setActiveCitation] = useState(null);

  const defaultQuestion =
    "In a motor accident claim where the deceased was self-employed and aged 54–55 years at the time of death, is the claimant entitled to an addition towards future prospects in computing compensation under Section 166 of the Motor Vehicles Act, 1988? If so, how much?";

  const handleSubmit = async (query) => {
    if (!query.trim()) return;

    setMessages((prev) => [...prev, { type: "question", text: query }]);
    setLoading(true);

    const isDefault =
      query.toLowerCase().includes("self-employed") &&
      query.includes("aged 54") &&
      query.includes("Section 166");

    if (isDefault) {
      setTimeout(() => {
        const simulatedResponse = {
          answer:
            "Yes, under Section 166 of the Motor Vehicles Act, 1988, the claimants are entitled to an addition for future prospects even when the deceased was self-employed and aged 54–55 years at the time of the accident. In Dani Devi v. Pritam Singh, the Court held that 10% of the deceased’s annual income should be added as future prospects.",
          citations: [
            {
              text:
                "as the age of the deceased at the time of accident was held to be about 54–55 years by the learned Tribunal, being self-employed, as such, 10% of annual income should have been awarded on account of future prospects.",
              source: "Dani_Devi_v_Pritam_Singh.pdf",
              link: "/Lexisg-frontend-intern-test/Dani_Devi_v_Pritam_Singh.pdf"
            },
          ],
        };
        setMessages((prev) => [...prev, { type: "answer", data: simulatedResponse }]);
        setLoading(false);
      }, 2000);
    } else {
      try {
        const res = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${import.meta.env.VITE_GEMINI_API_KEY}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              contents: [
                {
                  parts: [{ text: query }],
                },
              ],
            }),
          }
        );

        const result = await res.json();
        const aiText =
          result?.candidates?.[0]?.content?.parts?.[0]?.text ||
          "⚠️ No response received from Gemini.";

        const generatedResponse = {
          answer: aiText,
          citations: [
            {
              text: "No citation available.",
              source: "Generated by Gemini",
              link: "https://example.com",
            },
          ],
        };

        setMessages((prev) => [...prev, { type: "answer", data: generatedResponse }]);
      } catch (err) {
        console.error("Gemini fetch error:", err);
        setMessages((prev) => [
          ...prev,
          {
            type: "answer",
            data: {
              answer: "⚠️ Error fetching response from Gemini.",
              citations: [],
            },
          },
        ]);
      } finally {
        setLoading(false);
      }
    }
  };

  return (
    <div className="flex flex-col min-h-screen text-white bg-gradient-to-br from-[#0f0c29] via-[#302b63] to-[#24243e]">
      {/* Header */}
      <header className="py-4 px-6 sticky top-1 z-10 bg-[#1e1e2f]/70 backdrop-blur-md shadow-md">
        <h1 className="text-xl  text-yellow-300 drop-shadow-[0_0_4px_rgba(255,255,100,0.8)]">
          Lexi Legal Assistant
        </h1>
      </header>

      {/* Chat area */}
      <main className="flex-1 overflow-y-auto px-4 max-w-4xl mx-auto w-full py-6 space-y-6">
        {messages.map((msg, index) =>
          msg.type === "question" ? (
            <div key={index} className="flex justify-end">
              <div className="bg-[#1a1a2e] text-blue-200 p-4 rounded-xl max-w-lg shadow-lg border border-blue-500/30 shadow-blue-400/10">
                {msg.text}
              </div>
            </div>
          ) : (
            <AnswerPanel
              key={index}
              response={msg.data}
              onViewPDF={() => {
                if (msg.data?.citations?.[0]?.link) {
                  setActiveCitation(msg.data.citations[0].link);
                  setShowModal(true);
                }
              }}
            />
          )
        )}

        {/* Loader */}
        {loading && (
          <div className="flex items-start">
            <div className="bg-[#232332] p-4 rounded-xl max-w-lg text-yellow-200 animate-pulse border border-yellow-600/20">
              <div className="w-6 h-6 border-4 border-yellow-400 border-t-transparent rounded-full animate-spin shadow-[0_0_10px_rgba(255,200,0,0.6)] mb-2"></div>
              Generating response...
            </div>
          </div>
        )}

        {/* PDF Modal */}
        {showModal && activeCitation && (
          <CitationModal
            isOpen={showModal}
            onClose={() => setShowModal(false)}
            pdfLink={activeCitation}
          />
        )}
      </main>

      {/* Footer */}
      <footer className="sticky bottom-0 z-10 bg-[#1a1a2f] shadow-lg border-t border-yellow-500/20 shadow-[0_0_10px_rgba(255,200,0,0.2)]">
        <InputBox onSubmit={handleSubmit} loading={loading} />
      </footer>
    </div>
  );
}

export default App;
